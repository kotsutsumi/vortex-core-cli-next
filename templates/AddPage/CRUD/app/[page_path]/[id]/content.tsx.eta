'use client'

// [@-- section="Import"]
import Cover from '@/app/_components/Cover'
import Link from 'next/link'
import t from '@/libs/vortexcore/misc/transtate'
import useDetailSwr from '@/app/_fetch/<%= it.page_path %>/useDetailSwr'
import { Button } from 'primereact/button'
import { InputTextarea } from 'primereact/inputtextarea'
import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
// [/@--]

// [@-- section="Code"]
export default function Content({ id }: { id: string }) {
    // useRouter
    const router = useRouter()

    // use content value
    const [content, setContent] = useState<string>('')

    // cover state
    const [cover, setCover] = useState(false)

    // use back to list text state
    const [backToListText, setbackToListText] = useState(t('back_to_list'))

    // use update text state
    const [updateText, setUpdateText] = useState(t('update'))

    // use delete text state
    const [deleteText, setDeleteText] = useState(t('delete'))

    // use detail swr
    const { data, isLoading, isError } = useDetailSwr(id)

    // save event handler
    const onSave = async () => {
        // show cover
        setCover(true)

        const response = await fetch(`/api/<%= it.page_path %>/${data.id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ content })
        })

        // hide cover
        setCover(false)

        // push to list page
        router.push(`/<%= it.page_path %>`)

        //
    }

    // simular to componentDidMount
    useEffect(() => {
        if (isLoading) {
            return
        }

        if (data.success === false) {
            // push to list page
            router.push(`/<%= it.page_path %>`)

            return

            //
        }

        // set content
        setContent(data.data.content)

        //
    }, [data])

    // Loading
    if (isLoading) {
        // Overlay

        // [@-- section="TSX" type="overlay"]

        // --------------------------------------------------------------------

        return <Cover />

        // [/@--]
    }

    // Error
    if (isError) {
        // --------------------------------------------------------------------

        return (
            // [@-- section="TSX" type="loading-error"]

            <div className="text-red-500">Loading Error</div>

            // [/@--]
        )

        //
    }

    // ------------------------------------------------------------------------
    return (
        // [@-- section="TSX" type="default"]

        <>
            {/* cover */}
            {cover && <Cover />}

            <div className="mb-4">
                <Link href="/<%= it.page_path %>">
                    <Button
                        label={backToListText}
                        icon="pi pi-angle-left"
                        outlined
                    />
                </Link>
            </div>
            <div className="mb-2">
                <InputTextarea
                    value={content}
                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
                        setContent(e.target.value)
                    }
                    rows={5}
                    cols={50}
                />
            </div>
            <div>
                <Button label={updateText} onClick={onSave} />
                <Button
                    label={deleteText}
                    severity="danger"
                    className="ml-2"
                    outlined
                    onClick={async () => {
                        const response = await fetch(
                            `/api/<%= it.page_path %>/${data.id}`,
                            {
                                method: 'DELETE'
                            }
                        )

                        // push to list page
                        router.push(`/<%= it.page_path %>`)
                    }}
                />
            </div>
        </>

        // [/@--]
    )

    //
}
// [/@--]

// EOF

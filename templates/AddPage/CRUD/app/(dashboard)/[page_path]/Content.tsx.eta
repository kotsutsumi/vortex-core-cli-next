'use client'

import Cover from '@/app/_components/Cover'
import getTranslation from '@/app/_libs/getTranslation'
import useDataSwr from '@/app/_fetch/<%= it.page_path %>/useDataSwr'
import { Button } from 'primereact/button'
import { Column } from 'primereact/column'
import { DataTable } from 'primereact/datatable'
import { Paginator } from 'primereact/paginator'
import { useRouter, useSearchParams } from 'next/navigation'
import { useState } from 'react'

// Content
export default function Content() {
    //

    // set translation
    const t = getTranslation()

    // useRouter
    const router = useRouter()

    // useSearchParams
    const searchParams = useSearchParams()

    // set page state
    const [page, setPage] = useState(
        searchParams.get('page') ? searchParams.get('page') : 0
    )

    // set limit state
    const [limit, setLimit] = useState(
        searchParams.get('limit') ? Number(searchParams.get('limit')) : 5
    )

    // cover state
    const [cover, setCover] = useState(false)

    // use selected item
    const [selectedItem, setSelectedItem] = useState(null)

    // use meta key
    const [metaKey, setMetaKey] = useState(true)

    // use first state
    const [first, setFirst] = useState(
        parseInt(page as any) * parseInt(limit as any)
    )

    // use delete text state
    const [deleteText, setDeleteText] = useState(t('delete'))

    // use add new note text state
    const [addNewNoteText, setAddNewNoteText] = useState(t('add_new_note'))

    // use contents text state
    const [contentsText, setContentsText] = useState(t('contents'))

    // use update text state
    const [updateText, setUpdateText] = useState(t('update'))

    // use rows state
    const [rows, setRows] = useState(limit)

    // on page change event handler
    const onPageChange = (event: any) => {
        // set first and rows
        setFirst(event.page * event.rows)
        setRows(event.rows)

        // redirect to new page
        window.location.href = `/<%= it.page_path %>/?page=${event.page}&limit=${event.rows}`
    }

    // selection change event handler
    const onSelectionChange = (e: any) => {
        // set selected item
        setSelectedItem(e.value as any)

        // push to detail page
        router.push(`/<%= it.page_path %>/${e.value.id}`)
    }

    // use data swr
    const { data, isLoading, isError, mutete } = useDataSwr(
        page as number,
        limit as number
    )

    // Loading
    if (isLoading) {
        // Overlay

        // [@-- section="TSX" type="overlay"]

        // --------------------------------------------------------------------

        return <Cover />

        // [/@--]
    }

    // Loading Error
    if (isError) {
        // --------------------------------------------------------------------

        return (
            // [@-- section="TSX" type="loading-error"]

            <div className="text-red-500">Loading Error</div>

            // [/@--]
        )

        //
    }

    // Delete Column Body
    const deleteBody = (rowData: any) => {
        // --------------------------------------------------------------------

        return (
            <>
                <Button
                    label={deleteText}
                    severity="danger"
                    outlined
                    onClick={async () => {
                        const response = await fetch(
                            `/api/<%= it.page_path %>/${rowData.id}`,
                            {
                                method: 'DELETE'
                            }
                        )

                        window.location.reload()
                    }}
                />
            </>
        )

        //
    }

    // ------------------------------------------------------------------------

    return (
        <>
            {cover && <Cover />}
            <div className="mb-4">
                <Button
                    label={addNewNoteText}
                    onClick={(e) => {
                        // push to new page
                        router.push(`/<%= it.page_path %>/new`)
                    }}
                />
            </div>
            <DataTable
                value={data.rows}
                rows={rows as any}
                stripedRows
                selectionMode="single"
                selection={selectedItem}
                dataKey="id"
                metaKeySelection={metaKey}
                onSelectionChange={onSelectionChange}
                tableStyle={{ minWidth: '50rem' }}
            >
                <Column field="id" header="Id"></Column>
                <Column field="content" header={contentsText}></Column>
                <Column field="createdAt" header={updateText}></Column>
                <Column field="id" body={deleteBody}></Column>
            </DataTable>
            <Paginator
                first={first as any}
                rows={rows as any}
                totalRecords={data.total}
                rowsPerPageOptions={[5, 10, 25, 50]}
                onPageChange={onPageChange}
            />
        </>
    )

    //
}

// EOF

// Menu.tsx

import Link from 'next/link'
import useMenuSwr from '@/fetch/useMenuSwr'
import { Data, MenuItem } from '@/@types/menu'
import { MutableRefObject, useEffect, useRef, useState } from 'react'
import { Puff } from 'react-loader-spinner'
import { Ripple } from 'primereact/ripple'
import { StyleClass } from 'primereact/styleclass'

const itemRenderer = (
    items: MenuItem[],
    refs: MutableRefObject<null>[],
    depth: number,
    category?: string
): any => {
    return items.map((menu, menuIndex) => {
        // skip if category is not match
        if (depth === 1 && menu.category !== category) {
            return
        }

        // set icon
        const icon = menu.icon + ' mr-2'

        // create submenus
        if (menu.items) {
            const indent = 'pl-' + depth * 2

            return (
                <>
                    <StyleClass
                        nodeRef={refs[menuIndex + (depth - 1) * 10]}
                        selector="@next"
                        enterClassName="hidden"
                        enterActiveClassName="slidedown"
                        leaveToClassName="hidden"
                        leaveActiveClassName="slideup"
                    >
                        <div
                            ref={refs[menuIndex + (depth - 1) * 10]}
                            className="p-ripple py-3 px-4 flex align-items-center justify-content-between text-600 cursor-pointer"
                        >
                            <span>
                                <i className={icon}></i>
                                <span className="font-medium">
                                    {menu.label}
                                </span>
                            </span>
                            <i className="pi pi-chevron-down"></i>
                            <Ripple />
                        </div>
                    </StyleClass>
                    <ul
                        className={
                            'hidden list-none p-0 m-0 overflow-hidden ' + indent
                        }
                    >
                        {itemRenderer(menu.items, refs, depth + 1, category)}
                    </ul>
                </>
            )
        }

        // set href
        const href = menu.href ? menu.href : '#'

        return (
            <li key={category + 'menu-' + menuIndex}>
                <Link
                    href={href}
                    className="no-underline p-ripple flex align-items-center cursor-pointer py-3 px-4 text-700 hover:surface-100 transition-duration-150 transition-colors w-full"
                >
                    <i className={icon}></i>
                    <span className="font-medium">{menu.label}</span>
                    <Ripple />
                </Link>
            </li>
        )

        //
    })
}

const renderer = (data: Data, refs: MutableRefObject<null>[]) => {
    // set classes state
    const classes = ['list-none', 'py-3', 'm-0']

    let lists = data.categories.map((category, categoryIndex) => {
        const renderdCategory = category ? (
            <li
                key={'category-' + categoryIndex}
                className="block py-3 px-4 mt-3 text-600 font-bold"
            >
                {category}
            </li>
        ) : (
            <li key={'category-' + categoryIndex} className="hidden"></li>
        )

        // TODO: fix li key warning
        let rendered = (
            <>
                {renderdCategory}
                {itemRenderer(data.items, refs, 1, category)}
            </>
        )

        return rendered

        //
    })

    return (
        <>
            <ul className={classes.join(' ')}>{lists}</ul>
        </>
    )

    //
}

export default function Menu() {
    // set refs
    const refs = []

    // init refs
    for (let i = 0; i < 100; i++) {
        refs.push(useRef(null))
    }

    // use loadingClasses state
    const [loadingClasses, setLoadingClasses] = useState([
        'min-height',
        'h-full',
        'w-full',
        'flex',
        'justify-content-center',
        'align-content-center',
        'flex-wrap'
    ])

    // use menu swr
    const { data, isLoading, isError } = useMenuSwr()

    // similar to componentDidMount and componentDidUpdate
    useEffect(() => {}, [])

    // -------------------------------------------------------------

    // Loading
    if (isLoading || !data) {
        return (
            <div
                className={loadingClasses.join(' ')}
                style={{ minHeight: '768px' }}
            >
                <Puff
                    height="60"
                    width="60"
                    radius={1}
                    color="#f5f5f5"
                    ariaLabel="puff-loading"
                    wrapperStyle={{}}
                    wrapperClass=""
                    visible={true}
                />
            </div>
        )
    }

    // Error
    if (isError) {
        return (
            <div
                className={loadingClasses.join(' ') + ' text-red-600'}
                style={{ minHeight: '768px' }}
            >
                Loading Error
            </div>
        )
    }

    return <>{renderer(data, refs)}</>

    //
}

// EOF

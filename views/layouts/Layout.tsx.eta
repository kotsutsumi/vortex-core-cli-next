// Layout.tsx

import PrimeReactTheme, { ThemeEnum } from '@/components/PrimeReactTheme'
import React, { Dispatch, ReactNode, useEffect, useState } from 'react'
import { Inter } from 'next/font/google'
import { PrimeReactThemeContext } from '@/contexts/PrimeReactThemeContext'
import { LayoutProvider } from '@/contexts/LayoutContext'

export interface Props {
    children: ReactNode
}

// If loading a variable font, you don't need to specify the font weight
const inter = Inter({ subsets: ['latin'] })

export default function Layout({ children }: Props) {
    // darkmode state
    const [isDarkMode, setIsDarkMode] = useState(false)

    // similar to componentDidMount and componentDidUpdate
    useEffect(() => {}, [])

    // -------------------------------------------------------------

    return (
        <>
            <LayoutProvider>
                {/* PrimeReactThemeContext.Provider */}
                <PrimeReactThemeContext.Provider
                    value={{ isDarkMode, setIsDarkMode }}
                >
                    {/* PrimeReact Theme */}
                    <PrimeReactTheme
                        isDarkMode={isDarkMode}
                        lightTheme={ThemeEnum.LARA_LIGHT_BLUE}
                        darkTheme={ThemeEnum.LARA_DARK_BLUE}
                    />

                    {/* main */}
                    <main className={inter.className}>{children}</main>
                </PrimeReactThemeContext.Provider>
            </LayoutProvider>
        </>
    )

    //
}

// EOF

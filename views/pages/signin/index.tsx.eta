// index.tsx

import Cover from '@/components/Cover'
import { Message } from 'primereact/message'
import Layout from '@/layouts/Layout'
import NestedLayout from '@/layouts/Plain'
import NextImage from 'next/image'
import styles from '@/styles/signin/index.module.css'
import { Button } from 'primereact/button'
import { Checkbox } from 'primereact/checkbox'
import { InputText } from 'primereact/inputtext'
import { NextPageWithLayout } from '../_app'
import { ReactElement, useContext, useEffect, useState } from 'react'
import { auth } from '@/libs/firebase/client'
import { signIn as signInByNextAuth } from 'next-auth/react'
import { signInWithEmailAndPassword } from 'firebase/auth'
import Header from '@/components/signin/Header'
import Forms from '@/components/signin/Forms'
import { PrimeReactThemeContext } from '@/contexts/PrimeReactThemeContext'
import ThemeSwitcher, {
    getCurrentThemeName,
    getReveseThemeName
} from '@/components/ThemeSwitcher'
import LanguageSelector from '@/components/LanguageSelector'
import { useRouter } from 'next/router'
import { useTranslation } from 'next-i18next'
import { serverSideTranslations } from 'next-i18next/serverSideTranslations'
import { GetStaticProps } from 'next'

export const getStaticProps: GetStaticProps = async ({ locale }) => ({
    props: {
        ...(await serverSideTranslations(locale!, ['common']))
    }
})

const Page: NextPageWithLayout = () => {
    const logoAlt = 'Logo'
    const [email, setEmail] = useState('')
    const [password, setPassword] = useState('')
    const [checked1, setChecked1] = useState(false)

    // use router
    const router = useRouter()

    // use i18n
    const { t } = useTranslation('common')

    // darkmode context
    const { isDarkMode, setIsDarkMode } = useContext(PrimeReactThemeContext)

    // use logo src state
    const [logoSrc, setLogoSrc] = useState<string>('/images/logo-light.svg')

    // use theme switcher tooltip state
    const [themeSwitcherTooltip, setThemeSwitcherTooltip] = useState<string>('')

    // cover state
    const [cover, setCover] = useState(false)

    // show error state
    const [showError, setShowError] = useState(false)

    const signIn = async () => {
        if (!email) return
        if (!password) return

        // set cover state
        setCover(true)

        try {
            const userCredential = await signInWithEmailAndPassword(
                auth,
                email,
                password
            )
            const idToken = await userCredential.user.getIdToken()

            await signInByNextAuth('credentials', {
                idToken,
                callbackUrl: '/'
            })
        } catch (e) {
            // set show error state
            setShowError(true)

            // set cover state
            setCover(false)

            //
        }
    }

    // similar to componentDidMount and componentDidUpdate
    useEffect(() => {
        setLogoSrc(`/images/logo-${getCurrentThemeName()}.svg`)

        setThemeSwitcherTooltip(t(getReveseThemeName() + '-mode') as string)
    }, [isDarkMode, t])

    // -------------------------------------------------------------

    return (
        <div className="surface-ground h-screen w-screen px-4 py-8 md:px-6 lg:px-8 flex align-items-center justify-content-center">
            {/* cover */}
            {cover && <Cover />}

            {/* top-right menus */}
            <div
                className="absolute top-0 right-0 p-4 font-bold "
                style={{ minWidth: 300, minHeight: 70 }}
            >
                <div className="flex flex-row flex-wrap card-container blue-container">
                    <div className="flex align-items-center justify-content-center w-2rem h-2rem mr-4 pt-4">
                        {/* Theme Switcher */}
                        <ThemeSwitcher
                            tooltip={themeSwitcherTooltip}
                            // tooltip={t(getReveseThemeName() + '-mode')}
                            linkElementId="theme-link"
                            lightThemeName="lara-light-blue"
                            darkThemeName="lara-dark-blue"
                        />
                    </div>
                    <div className="flex align-items-center justify-content-center w-8 mr-4">
                        {/* Language Switcher */}
                        <LanguageSelector
                            locale={router.locale?.toString() as string}
                            translation={t}
                        />
                    </div>
                </div>
            </div>
            <div className="surface-card p-4 shadow-2 border-round w-full max-w-30rem">
                <div className="text-center mb-5">
                    <div>
                        <NextImage
                            priority
                            className="mb-3 mt-3"
                            src={logoSrc}
                            alt={logoAlt || ''}
                            width={224}
                            height={64}
                        />
                    </div>
                    <div className="text-900 text-3xl font-medium mb-3">
                        {/* Welcome Back */}
                    </div>
                    {/* <span className="text-600 font-medium line-height-3">
                    Don&apos;t have an account?
                </span>
                <a className="font-medium no-underline ml-2 text-blue-500 cursor-pointer">
                    Create today!
                </a> */}
                </div>

                {showError && (
                    <div className="flex align-items-center justify-content-between mb-4">
                        <Message
                            className="w-full"
                            severity="error"
                            text={t('signin-error')}
                        />
                    </div>
                )}

                <div>
                    <label
                        htmlFor="email"
                        className="block text-900 font-medium mb-2"
                    >
                        {t('email')}
                    </label>
                    <InputText
                        id="email"
                        type="text"
                        value={email}
                        onChange={(event) => setEmail(event.target.value)}
                        placeholder={t('email-address') as string}
                        className="w-full mb-3"
                    />

                    <label
                        htmlFor="password"
                        className="block text-900 font-medium mb-2"
                    >
                        {t('password')}
                    </label>
                    <InputText
                        type="password"
                        placeholder={t('password') as string}
                        value={password}
                        onChange={(event) => setPassword(event.target.value)}
                        className="w-full mb-3"
                    />

                    <div className="flex align-items-center justify-content-between mb-6">
                        {/* <div className="flex align-items-center">
                            <Checkbox
                                id="rememberme"
                                className="mr-2"
                                checked={checked1}
                                onChange={(e) => setChecked1(e.checked as any)}
                            />
                            <label htmlFor="rememberme">Remember me</label>
                        </div>
                        <a className="font-medium no-underline ml-2 text-blue-500 text-right cursor-pointer">
                            Forgot your password?
                        </a> */}
                    </div>

                    <Button
                        label={t('signin') as string}
                        icon="pi pi-user"
                        className="w-full"
                        onClick={() => {
                            signIn()
                        }}
                    />
                </div>
            </div>
        </div>
    )

    //
}

Page.getLayout = function getLayout(page: ReactElement) {
    // ------------------------------------------------------------------------

    return (
        <Layout>
            {/* Plain Layout */}
            <NestedLayout>{page}</NestedLayout>
        </Layout>
    )

    //
}

export default Page

// EOF
